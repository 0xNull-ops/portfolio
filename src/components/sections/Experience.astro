---
import Section from '../Section.astro'
import { work } from '@cv'

import HTML from '@/icons/html.astro'
import CSS from '@/icons/css.astro'
import JavaScript from '@/icons/javascript.astro'
import TypeScript from '@/icons/type.astro'
import React from '@/icons/react.astro'
import Node from '@/icons/node.astro'
import MySQL from '@/icons/sql.astro'
import Git from '@/icons/git.astro'
import GitHub from '@/icons/GitHub.astro'
import Tailwind from '@/icons/tailwind.astro'
import Next from '@/icons/next.astro'
import Swift from '@/icons/swift.astro'
import SwiftUI from '@/icons/swiftui.astro'
import Kotlin from '@/icons/kotlin.astro'
import Flutter from '@/icons/flutter.astro'
import AstroJS from '@/icons/AstroJS.astro'
import WordPress from '@/icons/WordPress.astro'
import PHP from '@/icons/php.astro'
import Golang from '@/icons/Golang.astro'

const SKILLS_ICONS: Record<string, any> = {
  HTML,
  CSS,
  JavaScript,
  TypeScript,
  React,
  Node,
  MySQL,
  Git,
  GitHub,
  Next,
  Tailwind,
  Swift,
  SwiftUI,
  Kotlin,
  Flutter,
  AstroJS,
  WordPress,
  PHP,
  Golang,
}
---

<Section className={Astro.props.className} title='Experience'>
  <ul class='flex flex-col'>
    {
      work.map(
        ({
          name,
          startDate,
          endDate,
          position,
          summary,
          responsibilities,
          achievements,
          url,
          skills,
          location,
          location_type,
        }) => {
          const startYear = new Date(startDate).getFullYear()
          const endYear =
            endDate != null ? new Date(endDate).getFullYear() : 'Present'

          return (
            <li class='relative print:py-2'>
              <div class='group relative grid pb-1 transition-all sm:grid-cols-12 sm:gap-8 md:gap-6 lg:hover:!opacity-100 print:grid-cols-1 print:gap-1 print:pb-0'>
                <header class='relative mt-1 text-xs font-semibold sm:col-span-2'>
                  <time datetime={startDate} data-title={startDate}>
                    {startYear}
                  </time>{' '}
                  -{' '}
                  <time datetime={endDate} data-title={endDate}>
                    {endYear}
                  </time>
                </header>
                <div class='relative flex flex-col pb-6 before:absolute before:-ml-6 before:mt-2 before:h-full before:w-px before:bg-skin-muted sm:col-span-10 print:pb-0 print:before:hidden'>
                  <div class='absolute mt-2 h-2 w-2 -translate-x-[1.71rem] rounded-full bg-skin-muted ring ring-skin-fill print:hidden' />
                  <h3>
                    <div
                      class='group/link inline-flex items-center text-lg leading-tight focus-visible:text-amber-500 print:text-base'
                      aria-label='{position} - {company}'>
                      <span>
                        {position} <span>@</span>
                        {url ? (
                          <a
                            class='text-skin-hue'
                            href={url}
                            title={`Ver ${name}`}
                            target='_blank'>
                            {name}
                          </a>
                        ) : (
                          <span>{name}</span>
                        )}
                        {url && (
                          <span class='inline-block text-skin-hue print:[&>svg]:hidden'>
                            <svg
                              xmlns='http://www.w3.org/2000/svg'
                              viewBox='0 0 20 20'
                              fill='currentColor'
                              class='ml-1 inline-block h-4 w-4 shrink-0 translate-y-px transition-transform group-hover/link:-translate-y-1 group-hover/link:translate-x-1 group-focus-visible/link:-translate-y-1 group-focus-visible/link:translate-x-1 motion-reduce:transition-none'
                              aria-hidden='true'>
                              <path
                                fill-rule='evenodd'
                                d='M5.22 14.78a.75.75 0 001.06 0l7.22-7.22v5.69a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75h-7.5a.75.75 0 000 1.5h5.69l-7.22 7.22a.75.75 0 000 1.06z'
                                clip-rule='evenodd'
                              />
                            </svg>
                          </span>
                        )}
                      </span>
                    </div>
                  </h3>
                  {(location || location_type) && (
                    <div class='text-xs text-skin-muted'>
                      {location} {location && location_type && '-'}{' '}
                      {location_type}
                    </div>
                  )}
                  <div class='expandable-content mt-4 flex flex-col gap-4 text-sm print:gap-0 print:text-xs'>
                    {summary && (
                      <div class='flex flex-col gap-1'>
                        <h4>Summary:</h4>
                        <ul class='flex list-disc flex-col gap-2 text-skin-muted [&>li]:ml-4'>
                          {Array.isArray(summary) ? (
                            summary.map(item => <li>{item}</li>)
                          ) : (
                            <li>{summary}</li>
                          )}
                        </ul>
                      </div>
                    )}

                    {(responsibilities || achievements) && (
                      <div class="collapsible-content relative flex flex-col gap-4 max-sm:!h-auto md:after:absolute md:after:bottom-0 md:after:h-12 md:after:w-full md:after:bg-gradient-to-t md:after:from-skin-hue md:after:content-[''] dark:md:after:to-skin-hue/0 print:!h-auto print:gap-2 print:after:hidden">
                        {responsibilities && (
                          <div class='flex flex-col gap-1'>
                            <h4>Responsibilities:</h4>
                            <ul class='flex list-disc flex-col gap-2 text-skin-muted [&>li]:ml-4'>
                              {responsibilities.map(responsibility => (
                                <li>{responsibility}</li>
                              ))}
                            </ul>
                          </div>
                        )}

                        {achievements && (
                          <div class='flex flex-col gap-1'>
                            <h4>Achievements:</h4>
                            <ul class='flex list-disc flex-col gap-2 text-skin-muted [&>li]:ml-4'>
                              {achievements.map(achievement => (
                                <li>{achievement}</li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    )}

                    <button class='toggle-button group/more flex w-fit cursor-pointer items-center justify-center gap-1.5 text-xs text-skin-muted underline hover:text-skin-base print:hidden'>
                      <span class='button-text'>Show more</span>
                      <svg
                        class='h-4 w-4 duration-200 ease-out group-hover/more:translate-y-0.5'
                        viewBox='0 0 24 24'
                        xmlns='http://www.w3.org/2000/svg'
                        fill='none'
                        stroke='currentColor'
                        stroke-width='2'
                        stroke-linecap='round'
                        stroke-linejoin='round'>
                        <polyline points='6 9 12 15 18 9' />
                      </svg>
                    </button>

                    <ul
                      class='flex flex-wrap gap-2 print:hidden'
                      aria-label='Technologies used'>
                      {skills &&
                        skills.map(skill => {
                          const iconName = skill === 'Next.js' ? 'Next' : skill
                          const Icon = SKILLS_ICONS[iconName]
                          return (
                            <li class='flex items-center gap-1 rounded-md border border-solid border-skin-hue/20 bg-skin-button-accent/20 px-2 py-0.5 text-xs text-skin-hue print:border-none print:bg-transparent print:p-0 print:text-zinc-800'>
                              {Icon && <Icon />} <span>{skill}</span>
                            </li>
                          )
                        })}
                    </ul>
                  </div>
                </div>
              </div>
            </li>
          )
        }
      )
    }
  </ul>
</Section>
<style>
  li::marker {
    @apply text-skin-hue;
  }

  .collapsible-content {
    overflow: hidden;
    transition: height 0.3s ease-out;
  }

  .collapsible-content.expanded::after {
    opacity: 0;
  }

  .toggle-button svg {
    transition: transform 0.3s ease-out;
  }

  .toggle-button.expanded svg {
    transform: rotate(180deg);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons =
      document.querySelectorAll<HTMLElement>('.toggle-button')

    toggleButtons.forEach(button => {
      const content = button
        .closest('.expandable-content')
        ?.querySelector<HTMLElement>('.collapsible-content')
      const buttonText = button.querySelector<HTMLElement>('.button-text')

      if (content) {
        // Set initial height
        content.style.height = '50px'

        button.addEventListener('click', () => {
          const isExpanded = content.classList.contains('expanded')
          content.classList.toggle('expanded')
          button.classList.toggle('expanded')

          const startHeight = parseInt(content.style.height)
          const endHeight = isExpanded ? 50 : content.scrollHeight

          animateHeight(content, startHeight, endHeight, 300)

          if (buttonText) {
            buttonText.textContent = isExpanded ? 'Show more' : 'Show less'
          }
        })
      }
    })
  })

  function animateHeight(
    element: HTMLElement,
    start: number,
    end: number,
    duration: number
  ): void {
    const change = end - start
    const startTime = performance.now()

    function update(currentTime: number): void {
      const elapsedTime = currentTime - startTime
      if (elapsedTime > duration) {
        element.style.height = `${end}px`
      } else {
        const progress = elapsedTime / duration
        const easeProgress = easeInOutCubic(progress)
        const currentHeight = start + change * easeProgress
        element.style.height = `${currentHeight}px`
        requestAnimationFrame(update)
      }
    }

    requestAnimationFrame(update)
  }

  // Easing function for a smoother animation
  function easeInOutCubic(t: number): number {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
  }
</script>
